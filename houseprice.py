# -*- coding: utf-8 -*-
"""Houseprice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11kydrXLu_urVqm1G0iY3_e3Rub6cHLv8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
import seaborn as sns
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn import metrics

# We can also load boston data 
boston_data = sklearn.datasets.load_boston()

# loading data set to pandas dataframe
boston_data_frame = pd.DataFrame(boston_data.data, columns=boston_data.feature_names )
boston_data_frame.head()

boston_data_frame['Price'] = boston_data.target

boston_data_frame.head()

boston_data_frame.shape

# now we can check the null or missing values
boston_data_frame.isnull().sum()

# statistical measures of the dataset
boston_data_frame.describe()

"""Now we find or understand the realation(correlation) between features of our dataset
1. Positive correlation
2. Negative correlation
"""

Correlation = boston_data_frame.corr()

# now we construct the heatmap to understand the correlation
plt.figure(figsize = (20,10))

sns.heatmap(Correlation, cbar = True, square = False , fmt = '.1f', annot = True, annot_kws = {'size':8}, cmap = 'Blues')

"""Splitting data in X and Y"""

X = boston_data_frame.drop(['Price'], axis = 1)

Y = boston_data_frame['Price']

print(X)
print(Y)

"""Split data in train And test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2)

"""Model Training

XGBoost regreesor
"""

model = XGBRegressor()

model.fit(X_train, Y_train)

training_data_prediction = model.predict(X_train)

print(training_data_prediction)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

"""prediction on  test DATA"""

# accuracy for prediction on test data
test_data_prediction = model.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

